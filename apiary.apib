HOST: http://www.google.com/

--- Auth 2.0 Core ---
---
Core API Spec for TNT Auth 2.0

# TNT Auth vs. OAuth

The TNT Auth 2.0 framework owes much to OAuth 2.0 spec, but is designed to support some different use cases.
As a result, while it bears more than a passing resemblance to OAuth, it is not an OAuth implementation.

# Parameter Naming

Many OAuth parameters are named using underscores to separate multiple words in their name (eg. `auth_code`).
TNT Auth 1.0 adopted this convention for parameters "reused" from OAuth, while using camelCase for TNT "native"
paramters (eg. "anonymousSecret").

TNT Auth 2.0 strictly uses camelCasing for parameter naming.

# Permissions

Permissions are defined in a hierarchy and, where possible, map closely to an endpoint's URL structure. Levels of hierarchy are separated by colons.

The topmost (first) element is considered a "namespace", typically corresponding to a particular TNT service (eg. "auth" or "geoip"). Services then define meaningful hierarchies within their namespace.

Permissions may contain substitutions, for example `${gameId}` or `${tntId}`. These will be filled in at runtime based on the context of a given request.

---

--
Authorization Code Endpoint

# Form Parameters

* `gameId` - The id of your game; required
* `provider` - The authentication provider, one of "anonymous", "facebook" or "origin"; required
* `providerAuthCode` - For non-anonymous logins, the authorization code provided by the authentication provider; required for non-anonymous logins
* `anonymousSecret` - For returning anonymous users, the anonymousSecret returned in their original (and all prior) authorization code requests; required for returning anonymous users
* `recoveryPlatform`
* `recoverySecret`

--

Request an Anonymous Authorization Code for a first time user

#### Required Permissions
* None

POST /rest/v2/auth/code
> Content-Type: application/x-www-form-urlencoded
gameId=my-awesome-game&provider=anonymous
< 200
< Content-Type: application/json
{
    "tntId": "4a9f9344-6df8-48b4-a509-32d33632a7f3",
    "code": "MDsNAsS4YwKaSS92DR4eT3mA2az2NOp0OIb9jR8iWl4=",
    "expires": "2012-09-25T05:15:02.248Z",
    "newUser": "true",
    "anonymousSecret": "topsecret"
}

Request an Anonymous Authorization Code for a returning user

#### Required Permissions
* None

POST /rest/v2/auth/code
> Content-Type: application/x-www-form-urlencoded
gameId=my-awesome-game&provider=anonymous&anonymousSecret=topsecret
< 200
< Content-Type: application/json
{
    "tntId": "4a9f9344-6df8-48b4-a509-32d33632a7f3",
    "code": "MDsNAsS4YwKaSS92DR4eT3mA2az2NOp0OIb9jR8iWl4=",
    "expires": "2012-09-25T05:15:02.248Z",
    "newUser": "true",
    "anonymousSecret": "topsecret"
}

Request an Authorization Code using a Facebook code.

In this case, assume we've seen this user before, so `newUser` is set to `false`

#### Required Permissions
* None

POST /rest/v2/auth/code
> Content-Type: application/x-www-form-urlencoded
gameId=my-awesome-game&provider=facebook&providerAuthCode=adsf1341v14
< 200
< Content-Type: application/json
{
    "tntId": "4a9f9344-6df8-48b4-a509-32d33632a7f3",
    "code": "MDsNAsS4YwKaSS92DR4eT3mA2az2NOp0OIb9jR8iWl4=",
    "expires": "2012-09-25T05:15:02.248Z",
    "newUser": "false"
}

--
Access Token Endpoint

Once the end user has obtained an Authorization Code, it is passed to the game server. The game server, in turn,
exchanges the code for an Access Code which it can use to make further requests to TNT on the user's behalf.

**Do not return an Authorization Code to the client.** An authorization code allows the bearer to manipulate
data for a user, eg. wallet balances. Operations like this should not be performed by the client directly; rather
the game server should perform them on the client's behalf after appropriate validation has taken place.

A future release may add the ability to create limited-scope tokens which *could* be returned to the client.

# Form Parameters

* `grantType` derived from OAuth grant type; `authorization_code` and `http://oauth.net/grant_type/assertion/saml/2.0/bearer` are accepted
* `code` The authorization code returned from a call to the Authorization Code endpoint; required when using a grantType of `authorization_code`
* `assertion` A base64 encoded SAML 2.0 Assertion; required when using a grantType of `http://oauth.net/grant_type/assertion/saml/2.0/bearer`

--

Using an Authorization Code

#### Required Permissions
* `auth:authorize`

POST /rest/v2/auth/token
> Content-Type: application/x-www-form-urlencoded
> Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
grantType=authorization_code&code=MDsNAsS4YwKaSS92DR4eT3mA2az2NOp0OIb9jR8iWl4=
< 200
< Content-Type: application/json
{
    "accessToken":"2YotnFZFEjr1zCsicMWpAA",
    "tokenType":"bearer",
    "expires": "2012-09-25T05:15:02.248Z",
    "refreshToken":"tGzv3JOkF0XG5Qx2TlKWIA",
    "tntId":"4a9f9344-6df8-48b4-a509-32d33632a7f3"
}

Using a SAML token

#### Required Permissions
* `auth:authorize`

POST /rest/v2/auth/token
> Content-Type: application/x-www-form-urlencoded
> Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
grantType=http%3A%2F%2Foauth.net%2Fgrant_type%2Fassertion%2Fsaml%2F2.0%2Fbearer&assertion=PEFzc2VydGlvbiBJc3N1ZUluc3RhbnQ[...omitted for brevity...]V0aG5TdGF0ZW1lbnQ-PC9Bc3NlcnRpb24-
< 200
< Content-Type: application/json
{
    "accessToken":"2YotnFZFEjr1zCsicMWpAA",
    "tokenType":"bearer",
    "expires": "2012-09-25T05:15:02.248Z",
    "refreshToken":"tGzv3JOkF0XG5Qx2TlKWIA",
    "tntId":"4a9f9344-6df8-48b4-a509-32d33632a7f3"
}   

--
Verify Credentials Endpoint

Allows the caller to determine whether a provided credential (Access Token or API Key) is valid.

If the caller is a TNT service, the endpoint will also return the set of TNT permissions associated with the
credential

# Form Parameters

* `accessToken` - An accessToken to validate
* `clientId` - The clientId portion of an API key to validate
* `clientSecret` - The clientSecret portion of an API key to validate

Only one of `accessToken` or `clientId`+`clientSecret` combo should be sent. If both are provided, only the
Access Token will be validated.

--
Check whether a given Access Token is valid.

# Required Permissions
* `auth:validate:basic`

POST /rest/v2/auth/validate
> Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
> Content-Type: application/x-www-form-urlencoded
accessToken=2YotnFZFEjr1zCsicMWpAA
< 200
< Content-Type: application/json
{
    "isValid":true,
    "tntId":"4a9f9344-6df8-48b4-a509-32d33632a7f3",
    "issuingGameId":"pogs",
    "expires":"2012-09-25T05:15:02.248Z"
}

Check whether a given API key is valid.

**Note:** no value is returned for 'expires', since Api Keys don't expire.

# Required Permissions
* `auth:validate:basic`

POST /rest/v2/auth/validate
> Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
> Content-Type: application/x-www-form-urlencoded
apiKeyId=1453a914-d498-41a9-9fed-e45f62beee47&apiKeySecret=6b099ba0-f16d-4768-9bfc-7866f9f9e8ec
< 200
< Content-Type: application/json
{
    "isValid":true,
    "tntId":"4a9f9344-6df8-48b4-a509-32d33632a7f3",
    "issuingGameId":"pogs"
}

Retrieve permissions associated with a particular Access Token.

This request is the same as a normal validate request, but requires an additional permission.

# Required Permissions
* `auth:validate:basic`
* `auth:validate:detailed`

POST /rest/v2/auth/validate
> Authorization: Basic YWRtaW46YWNjZXNz
> Content-Type: application/x-www-form-urlencoded
accessToken=2YotnFZFEjr1zCsicMWpAA
< 200
< Content-Type: application/json
{
    "isValid":true,
    "tntId":"4a9f9344-6df8-48b4-a509-32d33632a7f3",
    "issuingGameId":"pogs",
    "expires":"2012-09-25T05:15:02.248Z",
    "tntPermissions":["AUTH_USER_GET_ME", "AUTH_USER_UPDATE_ME", "WALLET_SERVICE_ACCESS"]
}

Failing validation will return only the `false` value for `isValid`.

POST /rest/v2/auth/validate
> Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
> Content-Type: application/x-www-form-urlencoded
accessToken=invalidToken
< 200
< Content-Type: application/json
{
    "isValid":false
}

--
API Key Management (Non-Final)
Endpoints for managing Api Keys.

An API Key is effectively a username (`apiKeyId`) and password (`apiKeySecret`) associated with a set of permissions. Adhering to the
principle of least privilege, game teams can create API keys with just those permissions required for a
particular application.

When creating an API Key, both the `apiKeyId` and `apiKeySecret` will be returned by the auth service. This is the
*only* time the secret will be provided. The auth service only stores a hash of the apiKeySecret, so if the
plaintext value is lost, a new API Key will need to be generated.

An API Key can have an arbitrary text `tag` associated with it to allow it to be identified.

--

Retrieve a list of all API keys for a game.

#### Required Permissions
* `auth:games:${gameId}:apiKeys:view`


GET /rest/v2/games/{gameId}/apiKeys
< 200
< Content-Type: application/json
{
    "_links": {"self": {
        "href": "http://localhost:8097/rest/games/{gameId}/apikeys/",
        "templated": false
    }},
    "results": [
        {
            "apiKeyId": "74d9be8f-9d18-42c6-8bc0-0041629dedd9",
            "createdAt": "2013-04-08T14:23:50.062Z",
            "scope": ["to", "be", "determined"],
            "tag": "new tag",
            "isEnabled": true
        },
        {
            "apiKeyId": "5db4db83-2e21-4ea1-a2aa-fcc4764a5714",
            "createdAt": "2013-04-08T14:23:28.383Z",
            "scope": ["to", "be", "determined"],
            "tag": "some other descriptive text",
            "isEnabled": true
        }
    ]
}

Retrieve details about a particular API Key. Note that after an API key has been created, the secret portion
of it is never returned again.

#### Required Permissions
* `auth:games:${gameId}:apiKeys:${apiKeyId}:view`

GET /rest/v2/games/{gameId}/apiKeys/{apiKeyId}
< 200
< Content-Type: application/json
{
    "apiKeyId": "74d9be8f-9d18-42c6-8bc0-0041629dedd9",
    "createdAt": "2013-04-08T14:23:50.062Z",
    "scope": ["to", "be", "determined"],
    "tag": "new tag",
    "isEnabled": true
}

Create a new API Key with a given scope (set of permissions). *Note:* the response to this request is the only time
that the `apiKeySecret` will be provided. If you lose this value, you will need to create a new API key.

#### Required Permissions
* `auth:games:${gameId}:apiKeys:create`
* Additionally, the set of permissions being granted to the API key must be a subset of those granted to the current user

POST /rest/v2/games/{gameId}/apiKeys
> Content-Type: application/json
{
    "scope": ["some", "permissions", "you", "want"],
    "tag": "new tag"
}
< 201
< Content-Type: application/json
{
    "apiKey": {
        "apiKeyId": "74d9be8f-9d18-42c6-8bc0-0041629dedd9",
        "createdAt": "2013-04-08T14:23:50.062Z",
        "scope": ["some", "permissions", "you", "want"],
        "tag": "new tag",
        "isEnabled": true
    },
    "apiKeySecret": "03320c44-c830-45f2-a6e8-892637e98b74"
}

Enable or disable an existing API key. Disabled API keys will cause an `isValid=false` result from the validation endpoint.

Disabling an API key can be useful to double-check that a key is not in use before deleting it.

If any fields other than `isEnabled` are specified in the body, they will be ignored.

#### Required Permissions
* `auth:games:${gameId}:apiKeys:${apiKeyId}:update`

PUT /rest/v2/games/{gameId}/apiKeys/{apiKeyId}
{
    "isEnabled": false
}
< 200

Delete an existing API key. Anyone using the key will no longer be able to access secured resources.

#### Required Permissions
* `auth:games:${gameId}:apiKeys:${apiKeyId}:delete`

DELETE /rest/v2/games/{gameId}/apiKeys/{apiKeyId}
< 204

--
Games Management (Non-Final)
--

Get a list of all games.

#### Required Permissions
* `auth:games:view`

GET /rest/v2/games/
< 200
< Content-Type: application/json
[
    {
        "gameId": "{gameId}",
        "gamePermissions": [
            "AUTH_USER_GET_ME"
        ],
        "sharedSecret": "sQb8NqYfwHlawByy.....",
        "oldSharedSecret": null,
        "oldSharedSecretExpiresAt": null,
        "facebookId": "123456789",
        "nucleusRequestorId": "987654321",
        "recoveryEnabled": false,
        "manages": null,
        "active": true
    },
    ...
]

Get a single game by id.

#### Required Permissions
* `auth:games:${gameId}:view`

GET /rest/v2/games/{gameId}
< 200
< Content-Type: application/json
{
    "gameId": "{gameId}",
    "gamePermissions": [
        "AUTH_USER_GET_ME"
    ],
    "sharedSecret": "sQb8NqYfwHlawByy.....",
    "oldSharedSecret": null,
    "oldSharedSecretExpiresAt": null,
    "facebookId": "123456789",
    "nucleusRequestorId": "987654321",
    "recoveryEnabled": false,
    "manages": null,
    "active": true
}

Create a new game.

#### Required Permissions
* `auth:games:create`

PUT /rest/v2/games/{gameId}
> Content-Type: application/json
{
  "gamePermissions": ["AUTH_USER_GET_ME"],
  "facebookId": "123456789",
  "nucleusRequestorId": "987654321",
  "recoveryEnabled": false,
  "active": true
}
< 201
< Content-Type: application/json
{
    "gameId": "{gameId}",
    "gamePermissions": [
        "AUTH_USER_GET_ME"
    ],
    "sharedSecret": "sQb8NqYfwHlawByy.....",
    "oldSharedSecret": null,
    "oldSharedSecretExpiresAt": null,
    "facebookId": "123456789",
    "nucleusRequestorId": "987654321",
    "recoveryEnabled": false,
    "manages": null,
    "active": true
}

Update a game by gameId.

#### Required Permissions
* `auth:games:${gameId}:update`

PUT /rest/v2/games/{gameId}
> Content-Type: application/json
{
  "gamePermissions": ["AUTH_USER_GET_ME"],
  "facebookId": "123456789",
  "nucleusRequestorId": "987654321",
  "recoveryEnabled": false,
  "active": true
}
< 200
< Content-Type: application/json
{
    "gameId": "{gameId}",
    "gamePermissions": [
        "AUTH_USER_GET_ME"
    ],
    "sharedSecret": "sQb8NqYfwHlawByy.....",
    "oldSharedSecret": null,
    "oldSharedSecretExpiresAt": null,
    "facebookId": "123456789",
    "nucleusRequestorId": "987654321",
    "recoveryEnabled": false,
    "manages": null,
    "active": true
}

--
User Management (Non-Final)
--

Get a user by TNT id.

#### Required Permissions
* `auth:games:${gameId}:users:${tntId}:view`

GET /rest/v2/games/{gameId}/users/{tntId}
< 200
< Content-Type: application/json
{
    "tntId": "{tntId}",
    "creationDate": "2013-10-16T12:58:49.796Z",
    "lastLoginDate": null,
    "banned": false
}

DEPRECATED - this is a special case for the management app to find game admins; need to determine a new more explicit approach

Get a list of users by roleDefinitionId. 
The list of userIds that are returned each have a role assignment for that role definition and game.

#### Required Permissions
* `auth:games:${gameId}:users:view`

GET /rest/v2/games/{gameId}/users?roleDefinitionId={roleDefinitionId}
< 200
< Content-Type: application/json
{
    "userRoleAssignments": [
        {
            "tntId": "3737d992-5de9-4dc3-b348-fe70b972e083",
            "roleAssignments": [
                {
                    "roleAssignmentId": "{roleAssignmentId}",
                    "roleDefinitionId": "{roleDefinitionId}",
                    "substitutions": {
                        "tntId": "f3787031-903b-4afe-85ac-82eaed33cc12",
                        "gameId": "pogs"
                    }
                }
            ]
        }
    ]
}

--
Role Definition Management (Non-Final)
--

Get a list of role definitions.

#### Required Permissions
* `auth:roledefinitions:view`

GET /rest/v2/roledefinitions
< 200
< Content-Type: application/json
[
    {
        "roleDefinitionId": "{roleDefinitionId}",
        "permissionTemplates": [
            "basicperm"
        ]
    },
    ...
]

Get a role definition by id.

#### Required Permissions
* `auth:roledefinitions:${roleDefinitionId}:view`

GET /rest/v2/roledefinitions/{roleDefinitionId}
< 200
< Content-Type: application/json
{
    "roleDefinitionId": "{roleDefinitionId}",
    "permissionTemplates": [
        "game:${gameId}"
    ],
    "requiredSubstitutions": [
        "gameId"
    ]
}

Create a role definition.

#### Required Permissions
* `auth:roledefinitions:create`

POST /rest/v2/roledefinitions
> Content-Type: application/json
{
    "roleDefinitionId": "{roleDefinitionId}",
    "permissionTemplates": [
        "game:${gameId}"
    ]
}
< 201
< Content-Type: application/json
{
    "roleDefinitionId": "{roleDefinitionId}",
    "permissionTemplates": [
        "game:${gameId}"
    ],
    "requiredSubstitutions": [
        "gameId"
    ]
}

Update a role definition by roleDefinitionId.

#### Required Permissions
* `auth:roledefinitions:${roleDefinitionId}:update`

PUT /rest/v2/roledefinitions/{roleDefinitionId}
> Content-Type: application/json
{
    "roleDefinitionId": "{roleDefinitionId}",
    "permissionTemplates": [
        "game:${gameId}:users:${tntId}"
    ]
}
< 200
< Content-Type: application/json
{
    "roleDefinitionId": "{roleDefinitionId}",
    "permissionTemplates": [
        "game:${gameId}:users:${tntId}"
    ],
    "requiredSubstitutions": [
        "gameId",
        "tntId"
    ]
}

Delete a role definition by roleDefinitionId.

#### Required Permissions
* `auth:roledefinitions:${roleDefinitionId}:delete`

DELETE /rest/v2/roledefinitions/{roleDefinitionId}
< 204

--
Role Assignment Management (Non-Final)
--

Get a list of role assignments by gameId and tntId.

#### Required Permissions
* `auth:games:${gameId}:users:${tntId}:roleassignments:view`

GET /rest/v2/games/{gameId}/users/{tntId}/roleassignments
< 200
< Content-Type: application/json
{
    "roleAssignments": [
        {
            "roleDefinitionId": "{roleDefinitionId}",
            "substitutions": {
                "tntId": "2ce91fa8-d127-470e-ba4b-1798a1c4d658",
                "gameId": "pogs"
            }
        }
        ...
    ]
}

Add a role assignment by gameId and tntId

#### Required Permissions
* `auth:games:${gameId}:users:${tntId}:roleassignments:create`
* Additionally, the caller must already have all of the permissions the new role assignment will entail

POST /rest/v2/games/{gameId}/users/{tntId}/roleassignments
> Content-Type: application/json
{
    "roleDefinitionId": "{roleDefinitionId}",
    "substitutions": {
        "gameId":"pogs",
        "tntId":"f3787031-903b-4afe-85ac-82eaed33cc12"
    }
}
< 201
{
    "roleAssignmentId": "{roleAssignmentId}",
    "roleDefinitionId": "{roleDefinitionId}",
    "substitutions": {
        "tntId": "f3787031-903b-4afe-85ac-82eaed33cc12",
        "gameId": "pogs"
    }
}

Retrieve a specific role assignment by gameId, tntId and roleAssignmentId.

#### Required Permissions
* `auth:games:${gameId}:users:${tntId}:roleassignments:${roleAssignmentId}:view`

GET /rest/v2/games/{gameId}/users/{tntId}/roleassignments/{roleAssignmentId}
< 200
< Content-Type: application/json
{
    "roleAssignmentId": "{roleAssignmentId}",
    "roleDefinitionId": "some-role-definition",
    "substitutions": {
        "tntId": "f3787031-903b-4afe-85ac-82eaed33cc12",
        "gameId": "pogs"
    }
}

Delete a role assignment by gameId, tntId and roleAssignmentId

#### Required Permissions
* `auth:games:${gameId}:users:${tntId}:roleassignments:${roleAssignmentId}:delete`

DELETE /rest/v2/games/{gameId}/users/{tntId}/roleassignments/{roleAssignmentId}
< 204

--
Account Link Management (Non-Final)

Account Links allow you to manage mappings from a particular user to accounts from multiple providers (Facebook, Origin, etc.)

An account link contains the following fields:

* `tntId` - the tntId of the user this account belongs to
* `accountType` - the type of the linked account. Currently supported: `anonymous`, `facebook`, `origin`, `googleplay`
* `accountId` - the id of the linked account
* `createdAt` - when this account was linked

When creating or updating an account link
* Specifying `tntId` or `accountType` in the body is optional. If they are provided, they must match the values specified in the URL.
* Any value provided for `createdAt` will be discarded.

--

Retrieve a list of accounts linked to a particular tntId.

#### Required Permissions
* `auth:games:${gameId}:users:${tntId}:accounts:view`

GET /rest/v2/games/{gameId}/users/{tntId}/accounts
< 200
< Content-Type: application/json
{
    "results": [
            {
                "tntId": "{tntId}"
                "accountType": "anonymous",
                "accountId": "{tntId}",
                "createdAt": "2013-10-16T12:58:49.796Z"
            },
            {
                "tntId": "{tntId}"
                "accountType": "facebook",
                "accountId": "1234567890",
                "createdAt": "2013-10-16T12:58:49.796Z"
            }
        ]
}

Retrieve a specific account.

#### Required Permissions
* `auth:games:${gameId}:users:${tntId}:accounts:view`

GET /rest/v2/games/{gameId}/users/{tntId}/accounts/facebook
< 200
< Content-Type: application/json
{
    "tntId": "{tntId}",
    "accountType": "facebook",
    "accountId": "1234567890",
    "createdAt": "2013-10-16T12:58:49.796Z",
}

Link a new account.

#### Required Permissions
* `auth:games:${gameId}:users:${tntId}:accounts:create`

PUT /rest/v2/games/{gameId}/users/{tntId}/accounts/origin
{
    "accountType": "origin",
    "accountId": "544513451234"
}
< 201
< Content-Type: application/json
{
    "tntId": "{tntId}",
    "accountType": "origin",
    "accountId": "544513451234",
    "createdAt": "2013-10-16T12:58:49.796Z"
}

Update an existing link.

#### Required Permissions
* `auth:games:${gameId}:users:${tntId}:accounts:update`

PUT /rest/v2/games/{gameId}/users/{tntId}/accounts/origin
{
    "accountType": "origin",
    "accountId": "090987545"
}
< 200
< Content-Type: application/json
{
    "accountType": "origin",
    "accountId": "090987545",
    "createdAt": "2013-10-16T12:58:49.796Z"
}

Delete a link

#### Required Permissions
* `auth:games:${gameId}:users:${tntId}:accounts:delete`

DELETE /rest/v2/games/{gameId}/users/{tntId}/accounts/origin
< 204

Retrieve an account by its `accountId`.

#### Required Permissions
* `auth:games:${gameId}:accounts:query`

GET /rest/v2/games/{gameId}/accounts/facebook/12345
< 200
< Content-Type: application/json
{
    "tntId": "{tntId}",
    "accountType": "facebook",
    "accountId": "12345",
    "createdAt": "2013-10-16T12:58:49.796Z"
}

Look up multiple accounts user by their `accountId`s.

#### Required Permissions
* `auth:games:${gameId}:accounts:query`

POST /rest/v2/games/{gameId}/accounts/bulklookup
> Content-Type: application/json
{
    "accountType":"origin",
    "accountIds": ["123456", "3213123", "252342"]
}
< 200
< Content-Type: application/json
{
    "results": [
        {
            "tntId": "abcd-1234",
            "accountType": "origin",
            "accountId": "123456",
            "createdAt": "2013-10-16T12:58:49.796Z"
        },
        {
            "tntId": "dfcb-4321",
            "accountType": "origin",
            "accountId": "3213123",
            "createdAt": "2013-10-16T12:58:49.796Z"
        },
        {
            "tntId": "becf-9876",
            "accountType": "origin",
            "accountId": "252342",
            "createdAt": "2013-10-16T12:58:49.796Z"
        }
    ]
}